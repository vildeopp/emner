#Oppgave 1bii)
yb = replicate(n, sum(rnorm(6)**2))
hist(yb, freq = FALSE,  xlim = c(0,20), breaks = b, prob = T, col = "lightblue")
ys = seq(0,20, l = 100)
lines(ys, y = dchisq(ys, df = df), col = "black", lwd = 4) #teoretisk tetthet
#oppgave 2c
#sammenligne histogrammen, kan bekrefte av at ved å ta logaritmen til alle observasjonene i a
#vil verdiene i b bli normalfordelte, ved å se på histogrammene.
par(mfrow = c(1,2))
#historgrammet i a
hist(z, breaks = b2, xlim = c(0,25), freq = FALSE, col = "lightblue", prob = T)
lines(zs, y = dlnorm(zs), col = "black", lwd = 4)
#historgammet i b
hist(y, breaks = b, prob = T)
lines(ys, y = dnorm(ys), lwd = 4)
z = rlnorm(1000)
zs = seq(0,25, l = 100)
#oppgave 2c
#sammenligne histogrammen, kan bekrefte av at ved å ta logaritmen til alle observasjonene i a
#vil verdiene i b bli normalfordelte, ved å se på histogrammene.
par(mfrow = c(1,2))
#historgrammet i a
hist(z, breaks = b2, xlim = c(0,25), freq = FALSE, col = "lightblue", prob = T)
#Oppgave 2a
b2 = 100
#historgrammet i a
hist(z, breaks = b2, xlim = c(0,25), freq = FALSE, col = "lightblue", prob = T)
lines(zs, y = dlnorm(zs), col = "black", lwd = 4)
#historgammet i b
hist(y, breaks = b, prob = T)
lines(ys, y = dnorm(ys), lwd = 4)
#Oppgave 3
#ai
m = 5 #antall observasjoner
theta = 9
#oppgave 1c
par(mfrow = c(1,2))
hist(x, breaks = b, prob = T)
xs = seq(0, 25, l=100)
lines(xs, y = dchisq(xs, df=df), col = "red", lwd = 4) #teoretisk tetthet
hist(yb, freq = FALSE,  xlim = c(0,20), breaks = b, prob = T, col = "lightblue")
ys = seq(0,20, l = 100)
lines(ys, y = dchisq(ys, df = df), col = "black", lwd = 4) #teoretisk tetthet
dev.off()
#Oppgave 2a
b2 = 100
z = rlnorm(1000)
hist(z, breaks = b2, xlim = c(0,25), freq = FALSE, col = "lightblue", prob = T)
zs = seq(0,25, l = 100)
lines(zs, y = dlnorm(zs), col = "black", lwd = 4)
#Oppgave 2a
b2 = 100
z = rlnorm(1000)
hist(z, breaks = b2, xlim = c(0,15), freq = FALSE, col = "lightblue", prob = T)
zs = seq(0,15, l = 100)
lines(zs, y = dlnorm(zs), col = "black", lwd = 4)
lines(zs, y = dlnorm(zs), col = "black", lwd = 2)
y = log(z)
dev.off
dev.off()
#Oppgave 2a
b2 = 100
z = rlnorm(1000)
hist(z, breaks = b2, xlim = c(0,15), freq = FALSE, col = "lightblue", prob = T)
zs = seq(0,15, l = 100)
lines(zs, y = dlnorm(zs), col = "black", lwd = 2)
y = log(z)
hist(y, breaks = b, prob = T)
ys = seq(-3,3 , l = 100)
lines(ys, y = dnorm(ys), lwd = 4)
ys = seq(-3,3 , l = 100)
lines(ys, y = dnorm(ys), lwd = 4)
var = sd(y)^2
mean = mean(y)
m = matrix(c(mean, var), ncol=2)
colnames("forventning", "varians")
m = matrix(c(mean, var), ncol=2)
colnames(m) = c("forventning", "varians")
#historgrammet i a
hist(z, breaks = b2, xlim = c(0,25), freq = FALSE, col = "lightblue", prob = T)
print(m)
#oppgave 2c
#sammenligne histogrammen, kan bekrefte av at ved å ta logaritmen til alle observasjonene i a
#vil verdiene i b bli normalfordelte, ved å se på histogrammene.
par(mfrow = c(1,2))
#historgrammet i a
hist(z, breaks = b2, xlim = c(0,25), freq = FALSE, col = "lightblue", prob = T)
lines(zs, y = dlnorm(zs), col = "black", lwd = 4)
#historgammet i b
hist(y, breaks = b, prob = T)
lines(ys, y = dnorm(ys), lwd = 4)
dev.off()
#oppgave 2c
#sammenligne histogrammen, kan bekrefte av at ved å ta logaritmen til alle observasjonene i a
#vil verdiene i b bli normalfordelte, ved å se på histogrammene.
par(mfrow = c(1,2))
#historgrammet i a
hist(z, breaks = b2, xlim = c(0,15), freq = FALSE, col = "lightblue", prob = T)
lines(zs, y = dlnorm(zs), col = "black", lwd = 4)
#historgammet i b
hist(y, breaks = b, prob = T)
lines(ys, y = dnorm(ys), lwd = 4)
#Oppgave 3
#ai
m = 5 #antall observasjoner
theta = 9
x = runif(n = 5, min = 0, max = theta)
y = max(x)
print(y)
#Oppgave 3
#ai
m = 5 #antall observasjoner
theta = 9
x = runif(n = 5, min = 0, max = theta)
y = max(x)
print(y)
#aii
yb = replicate(n = 1000, max(runif(n = 4, min = 0, max = theta)))
hist(yb, breaks = 50,  prob = T)
rm(list = lm())
rm(list= ls())
dev.off()
#Oppgave 3
#ai
m = 5 #antall observasjoner
theta = 9
x = runif(n = 5, min = 0, max = theta)
y = max(x)
set.seed(5000)
#Oppgave 3
#ai
m = 5 #antall observasjoner
theta = 9
x = runif(n = 5, min = 0, max = theta)
y = max(x)
print(y)
#aii
yb = replicate(n = 1000, max(runif(n = 4, min = 0, max = theta)))
hist(yb, breaks = 50,  prob = T)
#Oppgave 3
#ai
m = 5 #antall observasjoner
theta = 9
x = runif(n = 5, min = 0, max = theta)
y = max(x)
print(y)
#aii
yb = replicate(n = 1000, max(runif(n = 4, min = 0, max = theta)))
hist(yb, breaks = 50,  prob = T)
#oppgave 4
p = 20 #antall observasjoner
varians = 3 #valgt verdi
y4 = rnorm(n = p, mean = 0, sd = sqrt(varians))
print(y4)
std = sd(y4)
var = std^2
alpha = 0.05 #alpha for 95% konf.intervall
lowerQalpha = 1-(alpha/2)
upperQalpha = alpha/2
lowerQ = qchisq(p = lowerQalpha, df = p-1)
upperQ = qchisq(p = upperQalpha, df = p-1)
lowerBound = (var*(p-1))/lowerQ
upperBound = (var*(p-1))/upperQ
m = matrix(c(lowerBound, upperBound), ncol = 2)
table = as.table(m)
print(table)
colnames(table) = c("lower", "upper")
rownames(table) = c(" ")
print(table)
#Oppgave 3
#ai
m = 5 #antall observasjoner
theta = 9
x = runif(n = 5, min = 0, max = theta)
y = max(x)
print(y)
#aii
yb = replicate(n = 1000, max(runif(n = 4, min = 0, max = theta)))
hist(yb, breaks = 50,  prob = T)
#må regne ut tettheten til det ordnende utvalget her
y_seq = seq(0, theta, l =100)
lines(y_seq, 5*yseq*theta^(-5), col = "red", lwd = 2)
lines(y_seq, 5*y_seq*theta^(-5), col = "red", lwd = 2)
lines(y_seq, 5*y_seq^4*theta^(-5), col = "red", lwd = 2)
dev.off()
hist(yb, breaks = 50,  prob = T)
#må regne ut tettheten til det ordnende utvalget her
y_seq = seq(0, theta, l =100)
lines(y_seq, 5*y_seq^4*theta^(-5), col = "red", lwd = 2)
theta = 5
hist(yb, breaks = 50,  prob = T)
hist(yb, breaks = 50,  prob = T)
dev.off()
#må regne ut tettheten til det ordnende utvalget her
y_seq = seq(0, theta, l =100)
hist(yb, breaks = 50,  prob = T)
#Oppgave 3
#ai
m = 5 #antall observasjoner
theta = 5
x = runif(n = 5, min = 0, max = theta)
y = max(x)
print(y)
#aii
yb = replicate(n = 1000, max(runif(n = 4, min = 0, max = theta)))
hist(yb, breaks = 50,  prob = T)
#må regne ut tettheten til det ordnende utvalget her
y_seq = seq(0, theta, l =100)
lines(y_seq, 5*y_seq^4*theta^(-5), col = "red", lwd = 2)
?sample
#oppgave 4
#a
p = 20 #antall observasjoner
varians = 3 #valgt verdi
y4 = rnorm(n = p, mean = 0, sd = sqrt(varians))
B = 999
#genererer 999 varianser av samme sample som den i oppgave 4a
y5 = replicate(n = B, var(sample(x = y4, size = p, replace = TRUE)))
hist(y5, breaks = 50, prob = T)
#genererer 999 varianser av samme sample som den i oppgave 4a
b.varians = replicate(n = B, var(sample(x = y4, size = p, replace = TRUE)))
b.varians = sort(b.varians)
hist(b.varians, breaks = 50, prob = T)
hist(b.varians, breaks = 50, prob = T)
bootQ1 = b.varians[25]
bootQ3 = b.varians[75]
m_b = matrix(c(bootQ1, bootQ3), ncol = n)
m_b = matrix(c(bootQ1, bootQ3), ncol = 2)
colnames(m_b) = c("lower", "upper")
print(m_b)
bootQ3 = b.varians[975]
m_b = matrix(c(bootQ1, bootQ3), ncol = 2)
colnames(m_b) = c("lower", "upper")
print(m_b)
#genererer 999 varianser av samme sample som den i oppgave 4a
#pluss den orginale sample
b.varians = c(y4, replicate(n = B, var(sample(x = y4, size = p, replace = TRUE))))
hist(b.varians, breaks = 50, prob = T)
#genererer 999 varianser av samme sample som den i oppgave 4a
#pluss varaiansen til den orginale sample
b.varians = c(var, replicate(n = B, var(sample(x = y4, size = p, replace = TRUE))))
b.varians = sort(b.varians)
hist(b.varians, breaks = 50, prob = T)
#siden vi har 1000 verdier kan vi velge de 25 første som de laveste grensen og de 25 siste som den
#høyeste grensen.
bootQ1 = b.varians[25]
bootQ3 = b.varians[975]
m_b = matrix(c(bootQ1, bootQ3), ncol = 2)
colnames(m_b) = c("lower", "upper")
print(m_b)
#aii
yb = replicate(n = 1000, max(runif(n = 5, min = 0, max = theta)))
hist(yb, breaks = 50,  prob = T)
#Oppgave 3
#ai
m = 5 #antall observasjoner
theta = 5
x = runif(n = 5, min = 0, max = theta)
y = max(x)
print(y)
#aii
yb = replicate(n = 1000, max(runif(n = 5, min = 0, max = theta)))
hist(yb, breaks = 20,  prob = T)
theta = 9
x = runif(n = 5, min = 0, max = theta)
y = max(x)
print(y)
#aii
yb = replicate(n = 1000, max(runif(n = 5, min = 0, max = theta)))
hist(yb, breaks = 20,  prob = T)
#Oppgave 3
#ai
m = 5 #antall observasjoner
theta = 9
x = runif(n = 5, min = 0, max = theta)
y = max(x)
print(y)
#aii
yb = replicate(n = 1000, max(runif(n = 5, min = 0, max = theta)))
hist(yb, breaks = 50,  prob = T)
#må regne ut tettheten til det ordnende utvalget her
y_seq = seq(0, theta, l =100)
lines(y_seq, 5*y_seq^4*theta^(-5), col = "red", lwd = 2)
?hist
?paste
#b
par(mfrow(1,2))
func = function(theta, n = 1000, m = m ){
y8 = replicate(n=n, max(runif(n = m, min = 0, max = theta)))
hist(y8,
breaks = 50,
prob = T,
main = paste("theta =" + theta))
seq = seq(0, theta, l = 100)
lines(seq, 5*seq^4*theta^(-5), col = red, lwd = 2)
}
func(2)
func(30)
#oppgave 4
#a
p = 20 #antall observasjoner
varians = 3 #valgt verdi
#b
par(mfrow = c(1,2))
func = function(theta, n = 1000, m = m ){
y8 = replicate(n=n, max(runif(n = m, min = 0, max = theta)))
hist(y8,
breaks = 50,
prob = T,
main = paste("theta =" + theta))
seq = seq(0, theta, l = 100)
lines(seq, 5*seq^4*theta^(-5), col = red, lwd = 2)
}
func(2)
func = function(theta, n = 1000, m = 5 ){
y8 = replicate(n=n, max(runif(n = m, min = 0, max = theta)))
hist(y8,
breaks = 50,
prob = T,
main = paste("theta =" + theta))
seq = seq(0, theta, l = 100)
lines(seq, 5*seq^4*theta^(-5), col = red, lwd = 2)
}
func(2)
func(30)
func = function(theta, n = 1000, m = 5 ){
y8 = replicate(n=n, max(runif(n = m, min = 0, max = theta)))
hist(y8,
breaks = 50,
prob = T,
main = paste("theta =" + as.character(theta)))
seq = seq(0, theta, l = 100)
lines(seq, 5*seq^4*theta^(-5), col = red, lwd = 2)
}
func(2)
func(30)
#b
par(mfrow = c(1,2))
func = function(theta, n = 1000, m = 5 ){
y8 = replicate(n=n, max(runif(n = m, min = 0, max = theta)))
hist(y8,
breaks = 50,
prob = T,
main = paste("theta =", as.character(theta)))
seq = seq(0, theta, l = 100)
lines(seq, 5*seq^4*theta^(-5), col = red, lwd = 2)
}
func(2)
func(30)
func = function(theta, n = 1000, m = 5 ){
y8 = replicate(n=n, max(runif(n = m, min = 0, max = theta)))
hist(y8,
breaks = 50,
prob = T,
main = paste("theta =", as.character(theta)))
seq = seq(0, theta, l = 100)
lines(seq, 5*seq^4*theta^(-5), col = "red", lwd = 2)
}
func(2)
func(30)
rm(list = ls())
dev.off()
#oppgave 4
#a
p = 20 #antall observasjoner
varians = 3 #valgt verdi
y4 = rnorm(n = p, mean = 0, sd = sqrt(varians))
print(y4)
std = sd(y4)
var = std^2
alpha = 0.05 #alpha for 95% konf.intervall
lowerQalpha = 1-(alpha/2)
upperQalpha = alpha/2
lowerQ = qchisq(p = lowerQalpha, df = p-1)
upperQ = qchisq(p = upperQalpha, df = p-1)
lowerBound = (var*(p-1))/lowerQ
upperBound = (var*(p-1))/upperQ
m = matrix(c(lowerBound, upperBound), ncol = 2)
table = as.table(m)
print(table)
colnames(table) = c("lower", "upper")
rownames(table) = c(" ")
print(table)
B = 999
#genererer 999 varianser av samme sample som den i oppgave 4a
#pluss varaiansen til den orginale sample
b.varians = c(var, replicate(n = B, var(sample(x = y4, size = p, replace = TRUE))))
b.varians = sort(b.varians)
hist(b.varians, breaks = 50, prob = T)
#siden vi har 1000 verdier kan vi velge de 25 første som de laveste grensen og de 25 siste som den
#høyeste grensen.
bootQ1 = b.varians[25]
bootQ3 = b.varians[975]
m_b = matrix(c(bootQ1, bootQ3), ncol = 2)
colnames(m_b) = c("lower", "upper")
print(m_b)
?set.seed
rm(list = ls())
set.seed(5000);
x = rnorm(n=100, mean = 2, sd = 32)
s_tab = 0
for(i in 1:1000):
x_sim = x = rnorm(n=100, mean = 2, sd = 32)
s_tab = sd(x_sim)
hist(s_tab)
set.seed(5000)
x = rnorm(n=100, mean = 2, sd = 32)
s_tab = 0
for(i in 1:1000)
x_sim = x = rnorm(n=100, mean = 2, sd = 32)
s_tab = sd(x_sim)
hist(s_tab)
ls()
rm(list = ls())
set.seed(5000)
x = rnorm(n=100, mean = 2, sd = 32)
s_tab = 0
for(i in 1:1000)
x_sim = x = rnorm(n=100, mean = 2, sd = 32)
s_tab = sd(x_sim)
hist(s_tab)
set.seed(5000)
x = rnorm(n=100, mean = 2, sd = 32)
s_tab = 0
for(i in 1:1000){
x_sim = x = rnorm(n=100, mean = 2, sd = 32)
s_tab[i] = sd(x_sim)
}
hist(s_tab)
sample(1:10, size = 4, replace = T)
hist(boot_tab)
hist(s_tab)
sample(1:10, size = 4, replace = T) #eksempel på treking med tilbakelegging
#Bootstraping
B = 1000
n = 100
boot_tab = 0
for(i in 1:B){
x_star = sample(x, size = n, replace = T)
boot_tab[i] = sd(x_star) #standard deviation
}
hist(boot_tab)
installed.packages(knitr)
install.packages('knitr', dependencies = TRUE)
help knit_hooks
knit_hooks
knitr
package(knit_with_parameters(
))
rm(list = ls())
import.library(knitr)
install.library(knitr)
library(knitr)
install.packages("knitr")
library(knitr)
library(knitr)
##  Definer vektorene
Midparent <- c(66.0, 65.5, 71.5, 68.0, 70.0, 65.5, 67.0, 70.5, 69.5, 64.5, 67.5)
Daughter  <- c(64.0, 63.0, 69.0, 69.0, 69.0, 65.0, 63.0, 68.5, 69.0, 64.0, 67.0)
##  Lag figur
.x <- sample(x = 1:10, size = 11, replace = TRUE)
.y <- sample(x = 1:10, size = 11, replace = TRUE)
.main <- "Hovedtittel"
.xlab <- "Tekst langs x-aksen"
.ylab <- "Tekst langs y-aksen"
plot(x = .x, y = .y, type = "p", , las = 1,
main = .main, xlab = .xlab, ylab = .ylab)
###-------------------------------------------------------------------
## Some global settings for knitr
options(encoding = "UTF-8")
## Path to figures, ensuring easier inspection later on.
fig.path <- "figure/ex0-"
## Some global settings
knit_hooks$set(crop = hook_pdfcrop)
opts_chunk$set(out.width = '.49\\linewidth',
fig.show = 'hold',
fig.pos = 'h',
fig.align = 'center',
.path = fig.path,
warning = FALSE,
cache = TRUE,
autodep = TRUE,
##
crop = TRUE)
dep_auto()
knit_theme$set("acid")
## Note: Both specification of fig.show='hold' and out.with less than
## half of the linewidth is needed in order to get the plots side by
## side.  The specification of crop=TRUE removes unneeded white margins
## from the plots.
##  Specification of 'seed' is not really necessary in this mandatory task,
##  since  no simulations are required.  But it's nevertheless included since
##  the template use some samples
set.seed(seed = 543)
library(knitr)
library(knitr)
library(knitr)
Sweave2knitr("Oblig2-2.Rnw")
Sweave2knitr('Oblig2-2.Rnw')
ls
cd
getwd
getwd()
setwd(/Users/oppegard/Documents/stat111 )
setwd(/Users/oppegard/Documents/stat111"")
setwd("/Users/oppegard/Documents/stat111")
getwd()
Sweave2knitr('Oblig2-2.Rnw')
Sweave2knitr('Oblig2-2.Rnw')
Sweave2knitr('Oblig2-2.Rnw')
knit2pdf('Oblig2-2.Rnw')
source('~/Documents/stat111/oblig2.R')
